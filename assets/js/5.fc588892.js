(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{176:function(t,v,_){"use strict";_.r(v);var r=_(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"为什么要学习设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习设计模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么要学习设计模式")]),t._v(" "),_("h2",{attrs:{id:"导读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#导读","aria-hidden":"true"}},[t._v("#")]),t._v(" 导读")]),t._v(" "),_("p",[t._v("学习这件事从来都不算晚，也并不难。在这信息爆炸的时代，对于缺乏自觉性的我来说，通过一些公众号干货、技术博客、厚重的书本，几乎很难系统性地学习完Java语言中的某一项技术。比如遇到某个问题，往往在查找资料的过程中带出各种各样的问题，然后就被带偏了，一抬头才忽然发现，早已记不起最初查这个资料是为了解决什么问题。")]),t._v(" "),_("p",[t._v("总是这样零零散散地学习着Java及软件相关的技术。就像每天搬着砖一样，知识沉淀很少。于是开始了系统性地学习，并且记好学习的笔记。至于我是如何系统性地学习，从哪里学习的，英雄不问出处，私聊我，我就告诉你。（QQ：994642156，备注：学习笔记）")]),t._v(" "),_("h2",{attrs:{id:"目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目标","aria-hidden":"true"}},[t._v("#")]),t._v(" 目标")]),t._v(" "),_("ol",[_("li",[t._v("了解软件设计七大原则")]),t._v(" "),_("li",[t._v("了解设计模式历史由来及使用场景")]),t._v(" "),_("li",[t._v("了解设计模式能帮我们解决哪些问题")]),t._v(" "),_("li",[t._v("学习Spring中的设计模式")])]),t._v(" "),_("h2",{attrs:{id:"内容定位"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内容定位","aria-hidden":"true"}},[t._v("#")]),t._v(" 内容定位")]),t._v(" "),_("p",[t._v("并非设计模式非用不可，但是用好设计模式，能帮我们更好地解决实际问题，不仅能写出优雅的代码，还能便于项目的开发和维护，更加利于项目的重构。")]),t._v(" "),_("p",[t._v("你可能并不知道设计模式有哪些，可能不知道什么是工厂模式、策略模式、委派模式等等，但是在日常撸码中经常会用到，而自己却毫无察觉。")]),t._v(" "),_("p",[t._v("了解软件设计原则，了解设计模式的历史由来，理解设计模式是如何从生活场景中总结提炼出来的，这样就能深刻理解设计模式，有效将一个个复杂的业务场景转换成技术实现。")]),t._v(" "),_("h2",{attrs:{id:"软件设计七大原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#软件设计七大原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 软件设计七大原则")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("设计原则")]),t._v(" "),_("th",[t._v("解释")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("开闭原则")]),t._v(" "),_("td",[t._v("对扩展开放，对修改关闭。")])]),t._v(" "),_("tr",[_("td",[t._v("依赖倒置原则")]),t._v(" "),_("td",[t._v("通过抽象使各个类或者模块互不影响，实现松耦合。")])]),t._v(" "),_("tr",[_("td",[t._v("单一职责原则")]),t._v(" "),_("td",[t._v("一个类、接口、方法只做一件事。")])]),t._v(" "),_("tr",[_("td",[t._v("接口隔离原则")]),t._v(" "),_("td",[t._v("尽量保证接口的纯洁性，客户端不应该依赖不需要的接口。")])]),t._v(" "),_("tr",[_("td",[t._v("迪米特法则")]),t._v(" "),_("td",[t._v("又叫最少知道原则，一个类对其所依赖的的类知道得越少越好。")])]),t._v(" "),_("tr",[_("td",[t._v("里氏替换原则")]),t._v(" "),_("td",[t._v("子类可以扩展父类的功能，但不能改变父类原有的功能。")])]),t._v(" "),_("tr",[_("td",[t._v("合成复用原则")]),t._v(" "),_("td",[t._v("尽量使用对象组合、聚合，而不使用继承关系达到代码复用的目的。")])])])]),t._v(" "),_("h2",{attrs:{id:"学习spring中的设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#学习spring中的设计模式","aria-hidden":"true"}},[t._v("#")]),t._v(" 学习Spring中的设计模式")]),t._v(" "),_("p",[t._v("设计模式从来都不是单个设计模式独立使用的。在实际应用中，通常是多个设计模式混合使用。")]),t._v(" "),_("p",[t._v("Spring中用到的设计模式有：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("设计模式名称")]),t._v(" "),_("th",[t._v("举例")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("工厂模式")]),t._v(" "),_("td",[t._v("BeanFactory")])]),t._v(" "),_("tr",[_("td",[t._v("装饰器模式")]),t._v(" "),_("td",[t._v("BeanWrapper")])]),t._v(" "),_("tr",[_("td",[t._v("代理模式")]),t._v(" "),_("td",[t._v("AopProxy")])]),t._v(" "),_("tr",[_("td",[t._v("委派模式")]),t._v(" "),_("td",[t._v("DispatcherServlet")])]),t._v(" "),_("tr",[_("td",[t._v("策略模式")]),t._v(" "),_("td",[t._v("HandlerMapping")])]),t._v(" "),_("tr",[_("td",[t._v("适配器模式")]),t._v(" "),_("td",[t._v("HandlerAdapter")])]),t._v(" "),_("tr",[_("td",[t._v("模版模式")]),t._v(" "),_("td",[t._v("JdbcTemplate")])]),t._v(" "),_("tr",[_("td",[t._v("观察者模式")]),t._v(" "),_("td",[t._v("ContextLoaderListener")])])])]),t._v(" "),_("p",[t._v("围绕Spring的IOC、AOP、MVC、JDBC的思路，根据其设计类型的顺序，展开学习：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类型")]),t._v(" "),_("th",[t._v("名称")]),t._v(" "),_("th",[t._v("Name")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("创建型模式")]),t._v(" "),_("td",[t._v("工厂模式")]),t._v(" "),_("td",[t._v("Factory Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("单例模式")]),t._v(" "),_("td",[t._v("Singleton Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("原型模式")]),t._v(" "),_("td",[t._v("Prototype Pattern")])]),t._v(" "),_("tr",[_("td",[t._v("结构型模式")]),t._v(" "),_("td",[t._v("适配器模式")]),t._v(" "),_("td",[t._v("Adapter Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("装饰器模式")]),t._v(" "),_("td",[t._v("Decorator Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("代理模式")]),t._v(" "),_("td",[t._v("Proxy Pattern")])]),t._v(" "),_("tr",[_("td",[t._v("行为性模式")]),t._v(" "),_("td",[t._v("策略模式")]),t._v(" "),_("td",[t._v("Strategy Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("模板模式")]),t._v(" "),_("td",[t._v("Template Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("委派模式")]),t._v(" "),_("td",[t._v("Delegate Pattern")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("观察者模式")]),t._v(" "),_("td",[t._v("Observer Pattern")])])])])])}],!1,null,null,null);v.default=a.exports}}]);